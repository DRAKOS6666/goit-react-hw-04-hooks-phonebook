{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App/App.js","index.js"],"names":["ContactForm","addContact","useState","name","setName","number","setNumber","handleInputChange","target","value","onSubmit","event","preventDefault","reset","className","type","onChange","required","ContactListItem","contact","onClickDelete","id","onClick","ContactList","contacts","deleteContact","length","map","key","Filter","onFindItem","numberOfContacts","App","setContacts","filter","setFilter","useEffect","contactsInLocalStorage","localStorage","getItem","JSON","parse","error","console","log","setItem","stringify","isUnique","some","filteredContacts","toLowerCase","includes","newContact","uuidv4","prevState","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9f475f1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './ContactForm.scss';\r\n\r\nfunction ContactForm({ addContact }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    // const { name, value } = target;\r\n    // this.setState({ [name]: value });\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    addContact({ name, number });\r\n    setName('');\r\n    setNumber('');\r\n    // this.setState({\r\n    //   name: '',\r\n    //   number: '',\r\n    // });\r\n    event.target.reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        Name:\r\n        <input\r\n          name=\"name\"\r\n          className=\"formInput\"\r\n          type=\"text\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number:\r\n        <input\r\n          required\r\n          name=\"number\"\r\n          className=\"formInput\"\r\n          type=\"number\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <input className=\"submitBtn\" type=\"submit\" value=\"Add contact\" />\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addContact: propTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './ContactListItem.scss';\r\n\r\nfunction ContactListItem({ contact, onClickDelete }) {\r\n  const { id, name, number } = contact;\r\n  return (\r\n    <>\r\n      {name}: {number}\r\n      <button className=\"deleteContactBtn\" onClick={() => onClickDelete(id)}>\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  contact: propTypes.shape({\r\n    id: propTypes.string.isRequired,\r\n    name: propTypes.string.isRequired,\r\n    number: propTypes.string,\r\n  }).isRequired,\r\n  onClickDelete: propTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\n\r\nimport './ContactList.scss';\r\n\r\n\r\nfunction ContactList({contacts, deleteContact}) {\r\n return ( contacts.length === 0 ? <h3>Nothing found</h3> :\r\n   <ul className=\"contactList\">\r\n      {contacts.map(contact => (\r\n        <li className=\"contactListItem\" key={contact.id}>\r\n          <ContactListItem contact={contact} onClickDelete={deleteContact} />\r\n        </li>\r\n      ))}\r\n    </ul>);\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: propTypes.arrayOf(\r\n    propTypes.shape({\r\n      id: propTypes.string.isRequired,\r\n      name: propTypes.string.isRequired,\r\n      number: propTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  deleteContact: propTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nfunction Filter({ onFindItem, numberOfContacts }) {\r\n  return (\r\n    <label>\r\n      Find contacts by name:\r\n      <input type=\"text\" onChange={onFindItem} />\r\n  {numberOfContacts && <h3>Was finded {numberOfContacts} contact(s)</h3>}\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onFindItem: propTypes.func.isRequired,\r\n  numberOfContacts: propTypes.oneOfType([\r\n    propTypes.object,\r\n    propTypes.number,])\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport ContactList from '../ContactList/ContactList';\r\nimport Filter from '../Filter/Filter';\r\n\r\nimport './App.scss';\r\n\r\nexport default function App() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    const contactsInLocalStorage = localStorage.getItem('contacts');\r\n    if (contactsInLocalStorage) {\r\n      try {\r\n        setContacts(JSON.parse(contactsInLocalStorage));\r\n        return;\r\n      } catch (error) {\r\n        console.log('LocalStoage parse Error');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const findContact = event => setFilter(event.target.value);\r\n\r\n  const isUnique = name => !contacts.some(contact => contact.name === name);\r\n\r\n  const addContact = ({ name, number }) => {\r\n    if (name !== '' && isUnique(name)) {\r\n      const id = uuidv4();\r\n      const newContact = { name, number, id };\r\n      setContacts(prevState => [...prevState, newContact]);\r\n    }\r\n    if (!isUnique(name)) {\r\n      alert(`${name} is already in contact`);\r\n    }\r\n  };\r\n\r\n  const deleteContact = id => {\r\n    setContacts(prevState => prevState.filter(contact => contact.id !== id));\r\n  };\r\n\r\n  const filteredContacts = contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n\r\n  const numberOfContacts =\r\n    filteredContacts.length < contacts.length && filteredContacts.length !== 0\r\n      ? filteredContacts.length\r\n      : null;\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm addContact={addContact} />\r\n\r\n      <h2>Contacts ({contacts.length})</h2>\r\n      {contacts.length > 0 ? (\r\n        <>\r\n          <Filter\r\n            onFindItem={findContact}\r\n            numberOfContacts={numberOfContacts}\r\n          />\r\n          <ContactList\r\n            contacts={filteredContacts}\r\n            deleteContact={deleteContact}\r\n          />\r\n        </>\r\n      ) : (\r\n        <h3>Please add contacts...</h3>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}